import ftplib
import requests
import argparse
import socket
from datetime import datetime
import sys

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

def scan_port(target, port):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket.setdefaulttimeout(1)
        result = s.connect_ex((target, port))
        if result == 0:
            print(f"Port {port} is open")
        s.close()
    except (socket.error, OSError) as e:
        print(f"Error scanning port {port}: {e}")

def is_target_reachable(target):
    try:
        socket.gethostbyname(target)
        return True
    except socket.error:
        return False

def send_request_to_router(router_ip, router_port, endpoint, use_https=True):
    if is_target_reachable(router_ip):
        if router_port in [21, 22, 23, 25]:
            # Use the respective protocol for ports 21, 22, 23, 25
            protocol = "ftp"  # Port 21: FTP
            if router_port == 22:
                protocol = "ssh"  # Port 22: SSH
            elif router_port == 23:
                protocol = "telnet"  # Port 23: Telnet
            elif router_port == 25:
                protocol = "smtp"  # Port 25: SMTP

            # FTP interaction
            if protocol == "ftp":
                try:
                    ftp = ftplib.FTP()
                    ftp.connect(router_ip, router_port)
                    ftp.login()
                    print(f"Connected to FTP server on port {router_port}")
                    ftp.quit()
                except ftplib.error_perm as e:
                    print(f"FTP Error: {e}")

            else:
                # Use requests for other protocols
                url = f"{protocol}://{router_ip}:{router_port}{endpoint}"

                try:
                    response = requests.get(url, verify=use_https)
                    if response.status_code == 200:
                        print(f"Response content for {url}: {response.text}")
                    else:
                        print(f"Error: {response.status_code}, {response.text}")
                except requests.exceptions.RequestException as e:
                    print(f"Error: {e}")
                    print(f'Manually verify this in a browser: {url}')
                    

        elif router_port == 80:
            protocol = "http"
            url = f"{protocol}://{router_ip}:{router_port}{endpoint}"

            try:
                response = requests.get(url, verify=use_https)
                if response.status_code == 200:
                    print(f"Response content for {url}: {response.text}")
                else:
                    print(f"Error: {response.status_code}, {response.text}")
            except requests.exceptions.RequestException as e:
                print(f"Error: {e}")
                print(f'Manually verify this in a browser: {url}')
                

        elif router_port == 443:
            protocol = "https"
            url = f"{protocol}://{router_ip}:{router_port}{endpoint}"

            try:
                response = requests.get(url, verify=use_https)
                if response.status_code == 200:
                    print(f"Response content for {url}: {response.text}")
                else:
                    print(f"Error: {response.status_code}, {response.text}")
            except requests.exceptions.RequestException as e:
                print(f"Error: {e}")
                print(f'Manually verify this in a browser: {url}')
                

        else:
            print(f"Skipping port {router_port} for endpoint {endpoint}")
            return

    else:
        print(f"Target {router_ip} is unreachable. Check the target's availability.")
        

def main():
    parser = argparse.ArgumentParser(description="Port and Endpoint Scanner")
    parser.add_argument("target", help="Target IP address")
    parser.add_argument("endpoints", nargs="+", help="Endpoints to access on the router")
    parser.add_argument("--ports", nargs="+", type=int, help="Port(s) to scan (e.g., 80 443 or 1-100)")
    args = parser.parse_args()

    target = args.target
    ports = args.ports or range(1, 1025)

    print(f"Scanning target: {target}")
    print(f"Time started: {datetime.now()}\n")

    if is_target_reachable(target):
        for port in ports:
            scan_port(target, port)

        router_ports = [21, 22, 23, 25, 80, 110, 143, 443, 445, 3389]
        endpoints = args.endpoints

        for endpoint in endpoints:
            for router_port in router_ports:
                send_request_to_router(target, router_port, endpoint, use_https=False)
                send_request_to_router(target, router_port, endpoint, use_https=True)
    else:
        print(f"Target {target} is unreachable. Check the target's availability.")

if __name__ == "__main__":
    main()

